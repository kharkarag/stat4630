par(mfrow = c(2,2))
#i
qqnorm(num1.bs.df$cent, cex.lab=1.5, cex.main = 1.5)
#ii
qqnorm(num1.bs.df$slope, cex.lab=1.5, cex.main = 1.5)
#iii
plot(num1.bs.df$slope, num1.bs.df$int, xlab = "Slope", ylab = "Intercept", cex.lab=1.5, cex.main = 1.5)
#iv
plot(num1.bs.df$slope, num1.bs.df$cent, xlab = "Slope", ylab = "Centercept", cex.lab=1.5, cex.main = 1.5)
par(mfrow = c(1,1))
qplot(num3.comp, as.vector(num3.mp$residuals)) + labs(x = "Comparison", y = "Residual") + theme(text = element_text(size=14))
qplot(num3.comp, as.vector(num3.mp$residuals)) + labs(x = "Comparison", y = "Residual") + theme(text = element_text(size=16))
num3.row.comp <- data.frame(median = num3.mp$row, mean = num3.row)
num3.row.rr <- run.rrline(num3.mp$row, num3.row)
num3.rowplot <- qplot(num3.row.comp$median, num3.row.comp$mean) + labs(x = "Median", y = "Mean", title = "Row") + geom_abline(intercept = num3.row.rr$a, slope = num3.row.rr$b) + theme(text = element_text(size=16))
num3.col.comp <- data.frame(median = num3.mp$col, mean = num3.col)
num3.col.rr <- run.rrline(num3.mp$col, num3.col)
num3.colplot <- qplot(num3.col.comp$median, num3.col.comp$mean) + labs(x = "Median", y = "Mean", title = "Col")  + geom_abline(intercept = num3.col.rr$a, slope = num3.col.rr$b) + theme(text = element_text(size=16))
grid.arrange(grobs = list(num3.rowplot, num3.colplot), layout_matrix = t(matrix(c(1,2))))
qplot(num3.comp, as.vector(num3.mp$residuals)) + labs(x = "Comparison", y = "Residual") + theme(text = element_text(size=16))
ggplot(num2.fits, aes(num2.fits[,2], num2.fits[,1], label = rownames(num2.fits))) + geom_text() + labs(x = "Slope", y = "Intercept") + theme(text = element_text(size=16))
qplot(num3.res.comp$median, num3.res.comp$mean) + labs(x = "Median", y = "Mean", title = "Res")  + geom_abline(intercept = num3.res.rr$a, slope = num3.res.rr$b) + theme(text = element_text(size=16))
library(ggplot2)
library(gridExtra)
library(ACSWR)
library(bootstrap)
library(sfsmisc)
source("finalutils.R")
#----------5----------
num5.deaths1 <- as.matrix(read.table(header=TRUE, sep = "", row.names = 1, as.is=TRUE, text = "
0-4 5-9 10-14 15-19 20-24 25-29 30-34 35-39 40-44
CA   0   1     0     0     0     0     0     2     5
CO   0   0     0     0     0     0     0     0     0
DC   0   0     0     0     0     0     0     3     0
GA   0   1     1     0     0     0     0     0     2
MD   0   0     0     0     0     0     0     0     4
NJ   0   0     0     0     0     0     0     0     1
NM   0   0     0     0     0     0     0     0     0
NC   0   0     0     1     0     0     1     1     1
VA   0   0     1     0     0     0     1     0     2
"))
num5.deaths2 <- as.matrix(read.table(header=TRUE, sep = "", row.names = 1, as.is=TRUE, text = "
45-49 50-54 55-59 60-64 65-69 70-74 75-79 80-84  85+
CA    15    44   169   365   536   738   692   571  479
CO     0     0    12    11    16    27    21    22   20
DC     7    18    61   121   185   252   242   183  134
GA    13    48   159   315   515   663   588   332  273
MD     7    36    84   182   306   349   356   262  242
NJ     5    36    83   173   254   283   324   232  174
NM     1     1     2    11    14    16    20    14   30
NC    17    45   134   278   514   749   729   520  393
VA    10    35    85   236   438   523   474   372  303
"))
num5.pop1 <- as.matrix(read.table(header=TRUE, sep = "", row.names = 1, as.is=TRUE, text = "
Age    0-4     5-9   10-14   15-19   20-24   25-29   30-34   35-39   40-44
CA 2346378 2199156 2355971 2507592 2658591 2582880 2257866 1741152 1447091
CO  112385  106196  109913  121929  161360  146068  109352   79272   63098
DC  226340  253567  293930  333347  320433  308501  253436  190207  174689
GA 1102165 1124727 1189702 1224643 1064706  939321  776373  574769  464155
MD  670390  686315  783196  798695  706024  675430  616218  495476  411431
NJ  747421  768426  835393  820274  644273  596980  579102  507482  445832
NM  138059  126222  124657  123386  113055   95550   76177   56017   43537
NC  930828 1003892 1107810 1190462 1084777  861563  708350  539155  444630
VA  703932  721017  802016  871920  820274  726278  589504  457787  390463
"))
num5.pop2 <- as.matrix(read.table(header=TRUE, sep = "", row.names = 1, as.is=TRUE, text = "
Age  45-49   50-54  55-59  60-64  65-69  70-74  75-79  80-84   85+
CA 1232440 1061328 912727 758774 585221 417169 262593 133074 80426
CO   54747   42618  33142  24229  17150  11483   7449   4139  3449
DC  166129  170253 166764 144962 106780  70419  40995  18987 13792
GA  394640  360067 333142 298961 272489 187223 119070  56520 40489
MD  351798  306197 261346 212259 154095 104693  66044  31150 21965
NJ  374660  319142 271380 208757 156397 103102  66057  31487 21015
NM   35557   31140  25939  21881  17277  13910   8836   5007  4232
NC  390349  376087 364371 330022 281222 193236 122964  58819 42903
VA  355914  339385 320374 281301 227078 152343  98368  48194 34850
"))
num5.weights <- as.matrix(read.table(header=TRUE, sep = "", as.is=TRUE, text = "
0-4     5-9     10-14    15-19    20-24    25-29   30-34    35-39    40-44    45-49    50-54    55-59   60-64    65-69    70-74    75-79    80-84     85+
0.084416 0.098204 0.102304 0.093845 0.080561 0.066320 0.056249 0.054656 0.058958 0.059622 0.054643 0.049077 0.042403 0.034406 0.026789 0.018871 0.011241 0.007435
"))
num5.deaths <- cbind(num5.deaths1, num5.deaths2)
num5.pop <- cbind(num5.pop1, num5.pop2)
num5.weights
#1980 US population - look up or sum of table?
sum(num5.weights)
num5.deaths
num5.pop
#C
#num5.pop.std <- sweep(num5.pop, MARGIN = 2, num5.weights, '*')
#num5.deaths.std <- sweep(num5.deaths, MARGIN = 2, num5.weights, '*')
num5.deathrate <- num5.deaths/num5.pop
num5.deathrate.std <- sweep(num5.deathrate, MARGIN = 2, num5.weights, '*')
num5.state.std.rate <- rowSums(num5.deathrate.std)
num5.state.std.rate
barplot(100*num5.state.std.rate, ylab = "Rate as percent (ex. 0.01%)")
num5.state.rates <- as.matrix(read.table(header=TRUE, sep = "", as.is=TRUE, text = "
0-4     5-9    10-14   15-19   20-24   25-29   30-34   35-39   40-44    45-49   50-54   55-59   60-64   65-69   70-74   75-79   80-84   85+
0.0000  0.0089  0.0125  0.0121  0.0180  0.0204  0.0240  0.1236  0.5022  2.7372  9.6368 29.2678 73.8421 155.096 287.990 434.672 659.272 775.365
"))/100000
num5.state.rates
num5.deathrate.indstd <- sweep(num5.pop, MARGIN = 2, num5.state.rates, '*')
num5.deaths.exp <- rowSums(num5.deathrate.indstd)
num5.deaths.obs <- rowSums(num5.deaths)
num5.ind.rates <- num5.deaths.exp/rowSums(num5.pop)
barplot(100*num5.ind.rates, ylab = "Rate as percent (ex. 0.01%)", ylim = c(0, 0.03))
#FT residuals
num5.ft <- sqrt(4*num5.deaths.obs+2) - sqrt(4*num5.deaths.exp+1)
num5.ft <- sqrt(4*num5.deaths.obs+2) - sqrt(4*num5.deaths.exp+1)
((sqrt(4*num5.deaths.obs+2)-2)^2-1)/4
((sqrt(4*num5.deaths.obs+2)+2)^2-1)/4
((sqrt(4*num5.deaths.obs+2)-2)^2-1)/4/rowSums(num5.pop)
((sqrt(4*num5.deaths.obs+2)-2)^2-1)/4/rowSums(num5.pop)*100
((sqrt(4*num5.deaths.obs+2)+2)^2-1)/4/rowSums(num5.pop)*100
?segment
?segments
num5.ind.plot <- barplot(100*num5.ind.rates, ylab = "Rate as percent (ex. 0.01%)", ylim = c(0, 0.03))
num5.ci.low <- ((sqrt(4*num5.deaths.obs+2)-2)^2-1)/4/rowSums(num5.pop)*100
num5.ci.high - ((sqrt(4*num5.deaths.obs+2)+2)^2-1)/4/rowSums(num5.pop)*100
num5.ci.high <- ((sqrt(4*num5.deaths.obs+2)+2)^2-1)/4/rowSums(num5.pop)*100
segments(num5.int.plot, num5.ci.low, num5.int.plot, num5.ci.high)
num5.ind.plot <- barplot(100*num5.ind.rates, ylab = "Rate as percent (ex. 0.01%)", ylim = c(0, 0.03))
segments(num5.ind.plot, num5.ci.low, num5.ind.plot, num5.ci.high)
((sqrt(4*num5.deaths.obs+2)+2)^2-1)/4
num5.deaths.exp
num5.ci.low
num5.ind.plot <- barplot(100*num5.ind.rates, ylab = "Rate as percent (ex. 0.01%)", ylim = c(0, 0.035))
segments(num5.ind.plot, num5.ci.low, num5.ind.plot, num5.ci.high)
num5.ci.low
num5.ci.high
library(MASS)
lda.fit = lda(Direction ~ Lag1 + Lag2, data=Smarket, subset=train)
library(ISLR)
attach(Smarket)
lda.fit = lda(Direction ~ Lag1 + Lag2, data=Smarket, subset=train)
train = (Year<2005)
lda.fit = lda(Direction ~ Lag1 + Lag2, data=Smarket, subset=train)
lda.fit
plot(lda.fit)
Smarket.2005 = Smarket[!train,]
lda.pred = predict(lda.fit, Smarket.2005)
names(lda.pred)
lda.class = lda.pred$class
table(lda.class, Direction.2005)
Direction.2005 = Direction[!train]
table(lda.class, Direction.2005)
mean(lda.class==Direction.2005)
sum(lda.pred$posterior[,1]>=0.5)
sum(lda.pred$posterior[,1]<0.5)
lda.pred$posterior
lda.pred$posterior[1:20,1]
lda.class[1:20]
sum(lda.pred$posterior[,1]>0.9)
qda.fit = qda(Direction ~ Lag1 + Lag2, data=Smarket, subset = train)
qda.fit
qda.class = predict(qda.fit, Smarket.2005)$class
table(qda.class, Direction.2005)
mean(qda.class == Direction2.005)
mean(qda.class == Direction.2005)
library(class)
train.X = cbind(Lag1, Lag2)[train,]
test.X = cbind(Lag1, Lag2)[!train,]
train.Direction = Direction[train]
set.seed(1)
knn.pred = knn(train.X, test.X, train.Direction, k=1)
table(knn.pred, Direction.2005)
(83+43)/252
knn.pred = knn(train.X, test.X, train.Direction, k=3)
table(knn.pred, Direction.2005)
mean(knn.pred==Direction.2005)
dim(Caravan)
attach(Caravan)
summary(Purcahse)
summary(Purchase)
348/5474
348/5822
standardized.C = scale(Caravan[,-86])
standardized.X = scale(Caravan[,-86])
View(standardized.C)
rm(standardized.C)
var(Caravan[,1])
var(Caravan[,2])
var(standardized.X[,1])
var(standardized.X[,2])
test = 1:1000
train.x = standardized.X[-test,]
test.X = standardized.X[test,]
train.Y = Purchase[-test]
test.Y = Purchase[test]
set.seed(1)
knn.pred = knn(train.X, test.X, train.Y, k=1)
train.Y = Purchase[-test]
test.Y = Purchase[test]
set.seed(1)
knn.pred = knn(train.X, test.X, train.Y, k=1)
test = 1:1000
train.x = standardized.X[-test,]
test.X = standardized.X[test,]
train.Y = Purchase[-test]
train.X = standardized.X[-test,]
test.X = standardized.X[test,]
train.Y = Purchase[-test]
test.Y = Purchase[test]
set.seed(1)
knn.pred = knn(train.X, test.X, train.Y, k=1)
mean(test.Y != knn.pred)
mean(test.Y != "No")
table(knn.pred, test.Y)
9/(68+9)
knn.pred = knn(train.X, test.X, train.Y, k=3)
table(knn.pred, test.Y)
5/26
knn.pred = knn(train.X, test.X, train.Y, k=5)
table(knn.pred, test.Y)
4/15
glm.fit = glm(Purchase ~ ., data = Caravan, family = binomial, subset = -test)
glm.probs = predict(glm.fit, Caravan[test,], type = "response")
glm.probs
glm.pred = rep("No", 1000)
glm.pred[glm.probs > 0.5] = "Yes"
table(glm.pred, test.Y)
glm.pred = rep("No", 1000)
glm.pred[glm.probs > 0.25]
glm.pred[glm.probs > 0.25] = "Yes"
table(glm.pred, test.Y)
11/(22+11)
glm.fit
library(ISLR)
set.seed(1)
train = sample(392, 196)
?sample
train
lm.fit = lm(mpg~horsepower, data=Auto, subset=train)
attach(Auto)
mean((mpg-predict(lm.fit, Auto))[-train]^2)
lm.fit2 = lm(mpg~poly(horsepower, 2), data=Auto, subset=train)
mean((mpg-predict(lm.fit2, Auto))[-train]^2)
lm.fit3 = lm(mpg~poly(horsepower, 3), data=Auto, subset=train)
mean((mpg-predict(lm.fit3, Auto))[-train]^2)
set.seed(2)
train = sample(392, 196)
lm.fit = lm(mpg~horsepower, data=Auto, subset=train)
mean((mpg-predict(lm.fit, Auto))[-train]^2)
lm.fit2 = lm(mpg~poly(horsepower, 2), data=Auto, subset=train)
mean((mpg-predict(lm.fit2, Auto))[-train]^2)
lm.fit3 = lm(mpg~poly(horsepower, 3), data=Auto, subset=train)
mean((mpg-predict(lm.fit3, Auto))[-train]^2)
glm.fit = glm(mpg~horsepower, data=Auto)
coef(glm.fit)
lm.fit = lm(mpg~horsepower, data=Auto)
coef(lm.fit)
library(boot)
glm.fit = glm(mpg~horsepower, data=Auto)
cv.err = cv.glm(Auto, glm.fit)
cv.err$delta
cv.error=rep(0,5)
glm.fit=glm(mpg~poly(horsepower, i), data=Auto)
for(i in 1:5) {
glm.fit=glm(mpg~poly(horsepower, i), data=Auto)
cv.error[i] = cv.glm(Auto, glm.fit)$delta[1]
}
cv.error
set.seed(17)
cv.error.10=rep(0,10)
?cv.error
?cv.glm
for(i in 1:10) {
glm.fit = glm(mpg~power(horsepower, i), data=Auto)
cv.error.10 = cv.glm(Auto, glm.fit, K=10)$delta[1]
}
for(i in 1:10) {
glm.fit = glm(mpg~poly(horsepower, i), data=Auto)
cv.error.10 = cv.glm(Auto, glm.fit, K=10)$delta[1]
}
cv.error.10
cv.error.10=rep(0,10)
for(i in 1:10) {
glm.fit = glm(mpg~poly(horsepower, i), data=Auto)
cv.error.10[i] = cv.glm(Auto, glm.fit, K=10)$delta[1]
}
cv.error.10
set.seed(17)
cv.error.10=rep(0,10)
for(i in 1:10) {
glm.fit = glm(mpg~poly(horsepower, i), data=Auto)
cv.error.10[i] = cv.glm(Auto, glm.fit, K=10)$delta[1]
}
cv.error.10
alpha.fn = function(data, index) {
X = data$X[index]
Y = data$Y[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
alpha.fn(Portfolia, 1:100)
alpha.fn(Portfolio, 1:100)
set.seed(1)
sample(100,100,replace=T)
sample(100,100,replace=T)
set.seed(1)
alpha.fn(Portfolio, sample(100,100,replace=T))
boot(Portfolio, alpha.fn, R=1000)
boot.fn = function(data,index)
return(coef(lm(mpg~horsepower, data=data, subset=index)))
boot.fn(Auto, 1:392)
set.seed(1)
boot.fn(Auto, sample(392,392,replace=T))
boot.fn(Auto, sample(392,392,replace=T))
boot(Auto, boot.fn, R=1000)
summary(lm(mpg~horsepower, data=Auto))$coef
poly(horsepower, 2)
boot.fn = function(data, index)
return(coefficints(lm(mpg~horsepower+I(horsepower^2), data=data, subset=index)))
set.seed(1)
boot(Auto, boot.f, R=1000)
boot(Auto, boot.fn, R=1000)
boot.fn = function(data, index)
return(coefficients(lm(mpg~horsepower+I(horsepower^2), data=data, subset=index)))
set.seed(1)
boot(Auto, boot.fn, R=1000)
summary(lm(mpg~horsepower + I(horsepower^2), data=Auto))
summary(lm(mpg~horsepower + I(horsepower^2), data=Auto))$coef
boot(Auto, boot.fn, R=1000)
summary(lm(mpg~horsepower + I(horsepower^2), data=Auto))$coef
library(ISLR)
fix(Hitters)
names(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
Hitters = na.omit(Hitters)
dim(Hitters)
sum(is.na(Hitters))
library(leaps)
install.packages("leaps")
library(leaps)
regfit.full = regsubsets(Salary ~ ., Hitters)
summary(regfit.full)
regfit.full = regsubsets(Salary ~ ., Hitters, nvmax = 19)
reg.summary = summary(regfit.full)
names(reg.s)
names(reg.summary)
reg.summary$rsq
par(mfrow=c(2,2))
plot(reg.summary$rss, xlab="Number of Variables", ylab="RSS", type="1")
plot(reg.summary$rss, xlab="Number of Variables", ylab="RSS", type="l")
par(mfrow=c(2,2))
plot(reg.summary$rss, xlab="Number of Variables", ylab="RSS", type="l")
plot(reg.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq", type="l")
which.max(reg.summary$adjr2)
points(11, reg.summary$adjr2[11], col="red", cex=2, pch=20)
plot(reg.summary$cp, xlab="Number of Variables", ylab="Cp", type="l")
which.min(reg.summary$cp)
points(10, reg.summary$cp[10], col="red", cex=2, pch=20)
which.min(reg.summary$bic)
plot(reg.summary$bic, xlab="Number of Variables", ylab="BIC", type="l")
points(6, reg.summary$bic[6], col="red", cex=2, pch=20)
plot(regfit.full, scale="r2")
plot(regfit.full, scale="adjr2")
plot(regfit.full, scale="Cp")
plot(regfit.full, scale="bic")
?plot.regsubsets
par(mfrow=c(1,1))
plot(regfit.full, scale="r2")
plot(regfit.full, scale="adjr2")
plot(regfit.full, scale="Cp")
plot(regfit.full, scale="bic")
coef(regfit.full, 6)
regfit.fwd = regsubsets(Salary ~ ., data=Hitters, nvmax=19, method="forward")
summary(regfit.fwd)
regfit.bwd = regsubsets(Salary ~ ., data=Hitters, nvmax=19, method="backward")
summary(regfit.bwd)
coef(regfit.full, 7)
coef(regfit.fwd, 7)
coef(regfit.bwd, 7)
set.seed(1)
train = sample(c(TRUE, FALSE), nrow(Hitters), rep=TRUE)
test = (!train)
regfit.best = regsubsets(Salary ~ ., data=Hitters[train,], nvmax=19)
test.mat = model.matrix(Salary ~ ., data=Hitters[test,])
val.errors = rep(NA, 19)
for(i in 1:19){
coefi = coef(regfit.best, id=i)
pred = test.mat[,names(coefi)]%*%coefi
val.errors[i] = mean((Hitters$Salary[test]-pred)^2)
}
val.errors
#Lab 6
#6.5.1
library(ISLR)
fix(Hitters)
names(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
Hitters = na.omit(Hitters)
dim(Hitters)
sum(is.na(Hitters))
library(leaps)
regfit.full = regsubsets(Salary ~ ., Hitters)
summary(regfit.full)
regfit.full = regsubsets(Salary ~ ., Hitters, nvmax = 19)
reg.summary = summary(regfit.full)
names(reg.summary)
reg.summary$rsq
par(mfrow=c(2,2))
plot(reg.summary$rss, xlab="Number of Variables", ylab="RSS", type="l")
plot(reg.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq", type="l")
which.max(reg.summary$adjr2)
points(11, reg.summary$adjr2[11], col="red", cex=2, pch=20)
plot(reg.summary$cp, xlab="Number of Variables", ylab="Cp", type="l")
which.min(reg.summary$cp)
points(10, reg.summary$cp[10], col="red", cex=2, pch=20)
which.min(reg.summary$bic)
plot(reg.summary$bic, xlab="Number of Variables", ylab="BIC", type="l")
points(6, reg.summary$bic[6], col="red", cex=2, pch=20)
par(mfrow=c(1,1))
plot(regfit.full, scale="r2")
plot(regfit.full, scale="adjr2")
plot(regfit.full, scale="Cp")
plot(regfit.full, scale="bic")
coef(regfit.full, 6)
# 6.5.2
regfit.fwd = regsubsets(Salary ~ ., data=Hitters, nvmax=19, method="forward")
summary(regfit.fwd)
regfit.bwd = regsubsets(Salary ~ ., data=Hitters, nvmax=19, method="backward")
summary(regfit.bwd)
coef(regfit.full, 7)
coef(regfit.fwd, 7)
coef(regfit.bwd, 7)
# 6.5.3
set.seed(1)
train = sample(c(TRUE, FALSE), nrow(Hitters), rep=TRUE)
test = (!train)
regfit.best = regsubsets(Salary ~ ., data=Hitters[train,], nvmax=19)
test.mat = model.matrix(Salary ~ ., data=Hitters[test,])
val.errors = rep(NA, 19)
for(i in 1:19){
coefi = coef(regfit.best, id=i)
pred = test.mat[,names(coefi)]%*%coefi
val.errors[i] = mean((Hitters$Salary[test]-pred)^2)
}
val.errors
which.min(val.errors)
coef(regfit.best, 10)
predict.regsubsets = function(object, newdata, id, ...) {
form = as.formula(object$call[[2]])
mat = model.matrix(form, newdata)
coefi = coef(object, id = id)
xvars = names(coefi)
mat[,xvars]%*%coefi
}
regfit.best = regsubsets(Salary ~ ., data = Hitters, nvmax=19)
coef(regfit.best, 10)
k = 10
set.seed(1)
folds = sample(1:k, nrow(Hitteres), replace = TRUE)
folds = sample(1:k, nrow(Hitters), replace = TRUE)
cv.errors = matrix(NA, k, 19, dimnames = liost(NULL, paste(1:19)))
cv.errors = matrix(NA, k, 19, dimnames = list(NULL, paste(1:19)))
cv.errors
paste(1:19)
?paste
best.fit = regsubsets(Salary ~ ., data=Hitters[folds!=j,], nvmax=19)
folds
for(j in i:k) {
best.fit = regsubsets(Salary ~ ., data=Hitters[folds!=j,], nvmax=19)
for(i in 1:19){
pred = predict(best.fit, Hitters[folds==j,], id=i)
cv.errors[j,i] = mean((Hitters$Salary[folds==j]-pred)^2)
}
}
k = 10
set.seed(1)
folds = sample(1:k, nrow(Hitters), replace = TRUE)
cv.errors = matrix(NA, k, 19, dimnames = list(NULL, paste(1:19)))
for(j in i:k) {
best.fit = regsubsets(Salary ~ ., data=Hitters[folds!=j,], nvmax=19)
for(i in 1:19){
pred = predict(best.fit, Hitters[folds==j,], id=i)
cv.errors[j,i] = mean((Hitters$Salary[folds==j]-pred)^2)
}
}
mean.cv.errors = apply(cv.errors, 2, mean)
mean.cv.errors
par(mfrow=c(1,1))
plot(mean.cv.errors, type='b')
reg.best = regsubsets(Salary ~ ., data=Hitters, nvmax=19)
coef(reg.best, 11)
library(e1071)
install.packages("e1071")
library(e1071)
set.seed(1)
x = matrix(rnorm(20*2), ncol=2)
y = c(rep(-1, 10), rep(1, 10))
x[y==1,] = x[y==1,] + 1
library(e1071)
set.seed(1)
x = matrix(rnorm(20*2), ncol=2)
y = c(rep(-1, 10), rep(1, 10))
x[y==1,] = x[y==1,] + 1
plot(x, col=(3-y))
library(readr)
dataset <- read_csv(NULL)
View(dataset)
dataset <- read_csv('Strain.csv')
setwd("D:/OneDrive/Documents/UVA/4th Semester/STAT 4630/Project/Expedia/Matlab/stat4630")
setwd("D:/OneDrive/Documents/UVA/4th Semester/STAT 4630/Project/Expedia/Matlab/stat4630")
dataset <- read_csv('Strain.csv')
names(dataset)
hist(dataset$site_name)
levels(dataset$site_name)
levels(factor(dataset$posa_continent))
hist(factor(dataset$posa_continent))
hist(dataset$posa_continent)
